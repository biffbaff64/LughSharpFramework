using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Linq; // For Math.Max
using System.Runtime.InteropServices; // For P/Invoke

public class ImageWriter
{
    private void WriteImages(string outputDir, string scaledPackFileName, List<Page> pages, Settings settings, ProgressListener progress, ImageProcessor imageProcessor)
    {
        string packFileNoExt = Path.Combine(outputDir, scaledPackFileName);
        string packDir = Path.GetDirectoryName(packFileNoExt);
        string imageName = Path.GetFileName(packFileNoExt);

        int fileIndex = 1;
        for (int p = 0; p < pages.Count; p++)
        {
            Page page = pages[p];

            int width = page.width, height = page.height;
            int edgePadX = 0, edgePadY = 0;
            if (settings.edgePadding)
            {
                edgePadX = settings.paddingX;
                edgePadY = settings.paddingY;
                if (settings.duplicatePadding)
                {
                    edgePadX /= 2;
                    edgePadY /= 2;
                }
                page.x = edgePadX;
                page.y = edgePadY;
                width += edgePadX * 2;
                height += edgePadY * 2;
            }
            if (settings.pot)
            {
                width = NextPowerOfTwo(width);
                height = NextPowerOfTwo(height);
            }
            if (settings.multipleOfFour)
            {
                width = width % 4 == 0 ? width : width + 4 - (width % 4);
                height = height % 4 == 0 ? height : height + 4 - (height % 4);
            }
            width = Math.Max(settings.minWidth, width);
            height = Math.Max(settings.minHeight, height);
            page.imageWidth = width;
            page.imageHeight = height;

            string outputFile;
            while (true)
            {
                string name = imageName;
                if (fileIndex > 1)
                {
                    char last = name[name.Length - 1];
                    if (char.IsDigit(last) || (name.Length > 3 && last == 'x' && char.IsDigit(name[name.Length - 2])))
                    {
                        name += "-";
                    }
                    name += fileIndex;
                }
                fileIndex++;
                outputFile = Path.Combine(packDir, name + "." + settings.outputFormat);
                if (!File.Exists(outputFile)) break;
            }

            Directory.CreateDirectory(Path.GetDirectoryName(outputFile)); // Create parent directories
            page.imageName = Path.GetFileName(outputFile);

            using (Bitmap canvas = new Bitmap(width, height, GetPixelFormat(settings.format)))
            using (Graphics g = Graphics.FromImage(canvas))
            {
                if (!settings.silent) Console.WriteLine($"Writing {canvas.Width}x{canvas.Height}: {outputFile}");

                progress.Start(1f / pages.Count);
                for (int r = 0; r < page.outputRects.Count; r++)
                {
                    Rect rect = page.outputRects[r];
                    using (Bitmap image = rect.GetImage(imageProcessor))
                    {
                        int iw = image.Width;
                        int ih = image.Height;
                        int rectX = page.x + rect.x, rectY = page.y + page.height - rect.y - (rect.height - settings.paddingY);
                        if (settings.duplicatePadding)
                        {
                            int amountX = settings.paddingX / 2;
                            int amountY = settings.paddingY / 2;
                            if (rect.rotated)
                            {
                                // Copy corner pixels to fill corners of the padding.
                                for (int i = 1; i <= amountX; i++)
                                {
                                    for (int j = 1; j <= amountY; j++)
                                    {
                                        Plot(canvas, rectX - j, rectY + iw - 1 + i, image.GetPixel(0, 0).ToArgb());
                                        Plot(canvas, rectX + ih - 1 + j, rectY + iw - 1 + i, image.GetPixel(0, ih - 1).ToArgb());
                                        Plot(canvas, rectX - j, rectY - i, image.GetPixel(iw - 1, 0).ToArgb());
                                        Plot(canvas, rectX + ih - 1 + j, rectY - i, image.GetPixel(iw - 1, ih - 1).ToArgb());
                                    }
                                }
                                // Copy edge pixels into padding.
                                for (int i = 1; i <= amountY; i++)
                                {
                                    for (int j = 0; j < iw; j++)
                                    {
                                        Plot(canvas, rectX - i, rectY + iw - 1 - j, image.GetPixel(j, 0).ToArgb());
                                        Plot(canvas, rectX + ih - 1 + i, rectY + iw - 1 - j, image.GetPixel(j, ih - 1).ToArgb());
                                    }
                                }
                                for (int i = 1; i <= amountX; i++)
                                {
                                    for (int j = 0; j < ih; j++)
                                    {
                                        Plot(canvas, rectX + j, rectY - i, image.GetPixel(iw - 1, j).ToArgb());
                                        Plot(canvas, rectX + j, rectY + iw - 1 + i, image.GetPixel(0, j).ToArgb());
                                    }
                                }
                            }
                            else
                            {
                                // Copy corner pixels to fill corners of the padding.
                                for (int i = 1; i <= amountX; i++)
                                {
                                    for (int j = 1; j <= amountY; j++)
                                    {
                                        Plot(canvas, rectX - i, rectY - j, image.GetPixel(0, 0).ToArgb());
                                        Plot(canvas, rectX - i, rectY + ih - 1 + j, image.GetPixel(0, ih - 1).ToArgb());
                                        Plot(canvas, rectX + iw - 1 + i, rectY - j, image.GetPixel(iw - 1, 0).ToArgb());
                                        Plot(canvas, rectX + iw - 1 + i, rectY + ih - 1 + j, image.GetPixel(iw - 1, ih - 1).ToArgb());
                                    }
                                }
                                // Copy edge pixels into padding.
                                for (int i = 1; i <= amountY; i++)
                                {
                                    Copy(image, 0, 0, iw, 1, canvas, rectX, rectY - i, rect.rotated);
                                    Copy(image, 0, ih - 1, iw, 1, canvas, rectX, rectY + ih - 1 + i, rect.rotated);
                                }
                                for (int i = 1; i <= amountX; i++)
                                {
                                    Copy(image, 0, 0, 1, ih, canvas, rectX - i, rectY, rect.rotated);
                                    Copy(image, iw - 1, 0, 1, ih, canvas, rectX + iw - 1 + i, rectY, rect.rotated);
                                }
                            }
                        }
                        Copy(image, 0, 0, iw, ih, canvas, rectX, rectY, rect.rotated);
                        if (settings.debug)
                        {
                            using (Pen pen = new Pen(Color.Magenta))
                            {
                                g.DrawRectangle(pen, rectX, rectY, rect.width - settings.paddingX - 1, rect.height - settings.paddingY - 1);
                            }
                        }

                        if (progress.Update(r + 1, page.outputRects.Count)) return;
                    }
                }
                progress.End();

                if (settings.bleed && !settings.premultiplyAlpha
                    && !(settings.outputFormat.Equals("jpg", StringComparison.OrdinalIgnoreCase) || settings.outputFormat.Equals("jpeg", StringComparison.OrdinalIgnoreCase)))
                {
                    canvas = new ColorBleedEffect().ProcessImage(canvas, settings.bleedIterations);
                    g.Dispose(); // Dispose previous Graphics object
                    g = Graphics.FromImage(canvas);
                }

                if (settings.debug)
                {
                    using (Pen pen = new Pen(Color.Magenta))
                    {
                        g.DrawRectangle(pen, 0, 0, width - 1, height - 1);
                    }
                }

                try
                {
                    if (settings.outputFormat.Equals("jpg", StringComparison.OrdinalIgnoreCase) || settings.outputFormat.Equals("jpeg", StringComparison.OrdinalIgnoreCase))
                    {
                        using (Bitmap newImage = new Bitmap(canvas.Width, canvas.Height, PixelFormat.Format24bppRgb))
                        using (Graphics newGraphics = Graphics.FromImage(newImage))
                        {
                            newGraphics.DrawImage(canvas, 0, 0);
                            ImageCodecInfo jpgEncoder = GetEncoder(ImageFormat.Jpeg);
                            System.Drawing.Imaging.Encoder myEncoder = System.Drawing.Imaging.Encoder.Quality;
                            EncoderParameters myEncoderParameters = new EncoderParameters(1);
                            EncoderParameter myEncoderParameter = new EncoderParameter(myEncoder, (long)(settings.jpegQuality * 100));
                            myEncoderParameters.Param[0] = myEncoderParameter;
                            newImage.Save(outputFile, jpgEncoder, myEncoderParameters);
                        }
                    }
                    else
                    {
                        if (settings.premultiplyAlpha)
                        {
                            // Premultiply alpha (if needed)
                            PremultiplyAlpha(canvas);
                        }
                        canvas.Save(outputFile, ImageFormat.Png);
                    }
                }
                catch (IOException ex)
                {
                    throw new Exception("Error writing file: " + outputFile, ex);
                }

                if (progress.Update(p + 1, pages.Count)) return;
                progress.SetCount(progress.GetCount() + 1);
            }
        }
    }

    private static ImageCodecInfo GetEncoder(ImageFormat format)
    {
        ImageCodecInfo[] codecs = ImageCodecInfo.GetImageEncoders();
        foreach (ImageCodecInfo codec in codecs)
        {
            if (codec.FormatID == format.Guid)
            {
                return codec;
            }
        }
        return null;
    }

    private static void PremultiplyAlpha(Bitmap bitmap)
    {
        for (int y = 0; y < bitmap.Height; y++)
        {
            for (int x = 0; x < bitmap.Width; x++)
            {
                Color color = bitmap.GetPixel(x, y);
                float alpha = color.A / 255f;
                int red = (int)(color.R * alpha);
                int green = (int)(color.G * alpha);
                int blue = (int)(color.B * alpha);
                bitmap.SetPixel(x, y, Color.FromArgb(color.A, red, green, blue));
            }
        }
    }

    private void Copy(Bitmap source, int sourceX, int sourceY, int width, int height, Bitmap dest, int destX, int destY, bool rotated)
    {
        // ... (Implementation of Copy method) ...
    }

    private void Plot(Bitmap bitmap, int x, int y, int rgb)
    {
        // ... (Implementation of Plot method) ...
    }

    private int NextPowerOfTwo(int value)
    {
        // ... (Implementation of NextPowerOfTwo method) ...
    }

    private PixelFormat GetPixelFormat(string format)
    {
        // ... (Implementation of GetPixelFormat method) ...
    }
}
