///////////////////////////////////////////////////////////////////////////////
// MIT License
// 
// Copyright (c) 2024 Richard Ikin / Red 7 Projects
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
///////////////////////////////////////////////////////////////////////////////

public class Mesh : IDisposable
{
    public IIndexData IndexData   { get; set; }
    public bool       IsInstanced { get; set; } = false;
    public bool       AutoBind    { get; set; } = true;

    private static readonly Dictionary< IApplication, List< Mesh >? > _meshes = new();
    private readonly bool        _isVertexArray;
    private readonly ShortBuffer _shortBuffer = new( 100 );
    private readonly Vector3     _tmpV        = new();
    private readonly IVertexData _vertices;
    private InstanceBufferObject? _instances;

    public Mesh( VertexDataType type, bool isStatic, int maxVertices, int maxIndices, params VertexAttribute[] attributes )
        : this( type, isStatic, maxVertices, maxIndices, new VertexAttributes( attributes ) )
    {
    }

    public Mesh( VertexDataType type, bool isStatic, int maxVertices, int maxIndices, VertexAttributes attributes )
    {
        switch ( type )
        {
            case VertexDataType.VertexBufferObject:
                _vertices      = new VertexBufferObject( isStatic, maxVertices, attributes );
                IndexData      = new IndexBufferObject( isStatic, maxIndices );
                _isVertexArray = false;
                break;

            case VertexDataType.VertexBufferObjectSubData:
                _vertices      = new VertexBufferObjectSubData( isStatic, maxVertices, attributes );
                IndexData      = new IndexBufferObjectSubData( isStatic, maxIndices );
                _isVertexArray = false;
                break;

            case VertexDataType.VertexBufferObjectWithVAO:
                _vertices      = new VertexBufferObjectWithVAO( isStatic, maxVertices, attributes );
                IndexData      = new IndexBufferObjectSubData( isStatic, maxIndices );
                _isVertexArray = false;
                break;

            case VertexDataType.VertexArray:
            default:
                _vertices      = new VertexArray( maxVertices, attributes );
                IndexData      = new IndexArray( maxIndices );
                _isVertexArray = true;
                break;
        }

        AddManagedMesh( GdxApi.App, this );
    }

    public VertexAttributes VertexAttributes => _vertices.Attributes;
    public int NumIndices => IndexData.NumIndices;
    public int NumVertices => _vertices.NumVertices;
    public int MaxVertices => _vertices.NumMaxVertices;
    public int MaxIndices => IndexData.NumMaxIndices;
    public int VertexSize => _vertices.Attributes.VertexSize;
    public ShortBuffer IndicesBuffer => IndexData.GetBuffer( false );

    public Mesh EnableInstancedRendering( bool isStatic, int maxInstances, params VertexAttribute[] attributes )
    {
        if ( !IsInstanced )
        {
            IsInstanced = true;
            _instances  = new InstanceBufferObject( isStatic, maxInstances, attributes );
        }
        else
        {
            throw new GdxRuntimeException( "Trying to enable InstancedRendering on same Mesh instance twice."
                                           + " Use disableInstancedRendering to clean up old InstanceData first" );
        }

        return this;
    }

    public Mesh DisableInstancedRendering()
    {
        if ( IsInstanced )
        {
            IsInstanced = false;
            _instances?.Dispose();
            _instances = null;
        }

        return this;
    }

    public Mesh SetInstanceData( float[] instanceData, int offset, int count )
    {
        if ( _instances != null )
        {
            _instances.SetInstanceData( instanceData, offset, count );
            return this;
        }

        throw new GdxRuntimeException( "An InstanceBufferObject must be set before setting instance data!" );
    }

    public Mesh SetInstanceData( float[] instanceData )
    {
        if ( _instances != null )
        {
            _instances.SetInstanceData( instanceData, 0, instanceData.Length );
            return this;
        }

        throw new GdxRuntimeException( "An InstanceBufferObject must be set before setting instance data!" );
    }

    public Mesh SetInstanceData( FloatBuffer instanceData, int count )
    {
        if ( _instances != null )
        {
            _instances.SetInstanceData( instanceData, count );
            return this;
        }

        throw new GdxRuntimeException( "An InstanceBufferObject must be set before setting instance data!" );
    }

    public Mesh SetInstanceData( FloatBuffer instanceData )
    {
        if ( _instances != null )
        {
            _instances.SetInstanceData( instanceData, instanceData.Limit );
            return this;
        }

        throw new GdxRuntimeException( "An InstanceBufferObject must be set before setting instance data!" );
    }

    public Mesh UpdateInstanceData( int targetOffset, float[] source, int sourceOffset = 0, int count = 0 )
    {
        if ( count == 0 )
        {
            count = source.Length;
        }
        _instances?.UpdateInstanceData( targetOffset, source, sourceOffset, count );

        return this;
    }

    public Mesh UpdateInstanceData( int targetOffset, FloatBuffer source, int sourceOffset = 0, int count = 0 )
    {
        if ( count == 0 )
        {
            count = source.Limit;
        }
        _instances?.UpdateInstanceData( targetOffset, source, sourceOffset, count );

        return this;
    }

    public Mesh SetVertices( float[] vertices )
    {
        _vertices.SetVertices( vertices, 0, vertices.Length );
        return this;
    }

    public Mesh SetVertices( float[] vertices, int offset, int count )
    {
        _vertices.SetVertices( vertices, offset, count );
        return this;
    }

    public Mesh UpdateVertices( int targetOffset, float[] source )
    {
        return UpdateVertices( targetOffset, source, 0, source.Length );
    }

    public Mesh UpdateVertices( int targetOffset, float[] source, int sourceOffset, int count )
    {
        _vertices.UpdateVertices( targetOffset, source, sourceOffset, count );
        return this;
    }

    public float[] GetVertices( float[] vertices )
    {
        return GetVertices( 0, Constants.NOT_SET, vertices );
    }

    public float[] GetVertices( int srcOffset, float[] vertices )
    {
        return GetVertices( srcOffset, Constants.NOT_SET, vertices );
    }

    public float[] GetVertices( int srcOffset, int count, float[] vertices, int destOffset = 0 )
    {
        var max = NumVertices * VertexSize;
        if ( count == Constants.NOT_SET )
        {
            count = Math.Min( max - srcOffset, vertices.Length - destOffset );
        }
        var verticesBuffer = GetVerticesBuffer();
        var pos            = verticesBuffer.Position;
        verticesBuffer.Position = srcOffset;
        verticesBuffer.GetFloats( vertices, destOffset, count );
        verticesBuffer.Position = pos;
        return vertices;
    }

    public Mesh SetIndices( short[] indices )
    {
        IndexData.SetIndices( indices, 0, indices.Length );
        return this;
    }

    public Mesh SetIndices( short[] indices, int offset, int count )
    {
        IndexData.SetIndices( indices, offset, count );
        return this;
    }

    public void GetIndices( short[] indices, int destOffset = 0 )
    {
        GetIndices( 0, indices, destOffset );
    }

    public void GetIndices( int srcOffset, short[] indices, int destOffset )
    {
        GetIndices( srcOffset, -1, indices, destOffset );
    }

    public void GetIndices( int srcOffset, int count, short[] indices, int destOffset )
    {
        var max = NumIndices;
        if ( count < 0 )
        {
            count = max - srcOffset;
        }
        var pos = IndicesBuffer.Position;
        IndicesBuffer.Position = srcOffset;
        IndicesBuffer.GetShorts( indices, destOffset, count );
        IndicesBuffer.Position = pos;
    }

    public void Bind( in ShaderProgram shader )
    {
        Bind( shader, null );
    }

    public void Bind( in ShaderProgram shader, in int[]? locations )
    {
        _vertices.Bind( shader, locations );
        if ( _instances is { NumInstances: > 0 } )
        {
            _instances.Bind( shader, locations );
        }
        if ( IndexData.NumIndices > 0 )
        {
            IndexData.Bind();
        }
    }

    public void Unbind( in ShaderProgram? shader )
    {
        Unbind( shader, null! );
    }

    public void Unbind( in ShaderProgram? shader, in int[] locations )
    {
        if ( shader == null ) return;
        _vertices.Unbind( shader, locations );
        if ( _instances is { NumInstances: > 0 } )
        {
            _instances.Unbind( shader, locations );
        }
        if ( IndexData.NumIndices > 0 ) IndexData.Unbind();
    }

    public void Render( ShaderProgram shader, int primitiveType )
    {
        Render( shader, primitiveType, 0, IndexData.NumMaxIndices > 0 ? NumIndices : NumVertices, AutoBind );
    }

    public void Render( ShaderProgram? shader, int primitiveType, int offset, int count )
    {
        Render( shader, primitiveType, offset, count, AutoBind );
    }

    public unsafe void Render( ShaderProgram? shader, int primitiveType, int offset, int count, bool autoBind )
    {
        if ( count == 0 ) return;
        if ( autoBind ) Bind( shader );
        if ( _isVertexArray )
        {
            if ( IndexData.NumIndices > 0 )
            {
                var buffer = IndexData.GetBuffer( false );
                fixed ( short* ptr = &buffer.ToArray()[ 0 ] )
                {
                    GdxApi.Bindings.DrawElements( primitiveType, count, IGL.GL_UNSIGNED_SHORT, new IntPtr( ptr + offset ) );
                }
            }
            else
            {
                GdxApi.Bindings.DrawArrays( primitiveType, offset, count );
            }
        }
        else
        {
            if ( IndexData.NumIndices > 0 )
            {
                IndexData.Bind();
                var offsetInBytes = offset * sizeof( short ); // Calculate byte offset
                GdxApi.Bindings.DrawElements( primitiveType, count, IGL.GL_UNSIGNED_SHORT, offsetInBytes );
                IndexData.Unbind();
            }
            else
            {
                if ( IsInstanced )
                {
                    GdxApi.Bindings.DrawArraysInstanced( primitiveType, offset, count, _instances!.NumInstances );
                }
                else
                {
                    GdxApi.Bindings.DrawArrays( primitiveType, offset, count );
                }
            }
        }
        if ( autoBind ) Unbind( shader );
    }
    
    public VertexAttribute? GetVertexAttribute( int usage )
    {
        var attributes = _vertices.Attributes;
        var len = attributes.Size;

        for ( var i = 0; i < len; i++ )
        {
            if ( attributes.Get( i ).Usage == usage )
            {
                return attributes.Get( i );
            }
        }

        return null;
    }

    public FloatBuffer GetVerticesBuffer()
    {
        return _vertices.GetBuffer( false );
    }

    public BoundingBox CalculateBoundingBox()
    {
        var bbox = new BoundingBox();
        CalculateBoundingBox( bbox );
        return bbox;
    }

    public void CalculateBoundingBox( BoundingBox bbox )
    {
        var numVertices = NumVertices;
        var verts = _vertices.GetBuffer( false );
        bbox.ToInfinity();
        var posAttrib = GetVertexAttribute( ( int )VertexConstants.Usage.POSITION );
        var offset     = posAttrib!.Offset / 4;
        var vertexSize = _vertices.Attributes.VertexSize / 4;
        var idx        = offset;

        switch ( posAttrib.NumComponents )
        {
            case 1:
            {
                for ( var i = 0; i < numVertices; i++ )
                {
                    bbox.Extend( verts.GetFloat( idx ), 0, 0 );
                    idx += vertexSize;
                }
                break;
            }

            case 2:
            {
                for ( var i = 0; i < numVertices; i++ )
                {
                    bbox.Extend( verts.GetFloat( idx ), verts.GetFloat( idx + 1 ), 0 );
                    idx += vertexSize;
                }
                break;
            }

            case 3:
            {
                for ( var i = 0; i < numVertices; i++ )
                {
                    bbox.Extend( verts.GetFloat( idx ), verts.GetFloat( idx + 1 ), verts.GetFloat( idx + 2 ) );
                    idx += vertexSize;
                }
                break;
            }
        }
    }

    public BoundingBox CalculateBoundingBox( in BoundingBox box, int offset, int count )
    {
        return ExtendBoundingBox( box.ToInfinity(), offset, count );
    }

    public BoundingBox CalculateBoundingBox( in BoundingBox box, int offset, int count, in Matrix4 transform )
    {
        return ExtendBoundingBox( box.ToInfinity(), offset, count, transform );
    }

    public BoundingBox ExtendBoundingBox( in BoundingBox box, int offset, int count )
    {
        return ExtendBoundingBox( box, offset, count, null );
    }

    public BoundingBox ExtendBoundingBox( in BoundingBox box, int offset, int count, in Matrix4? transform )
    {
        var numIndices  = NumIndices;
        var numVertices = NumVertices;
        var max         = numIndices == 0 ? numVertices : numIndices;
        var verts       = _vertices.GetBuffer( false );
        var index       = IndexData.GetBuffer( false );
        var posAttrib   = GetVertexAttribute( ( int )VertexConstants.Usage.POSITION );
        var posoff      = posAttrib!.Offset / 4;
        var vertexSize  = _vertices.Attributes.VertexSize / 4;
        var end         = offset + count;

        switch ( posAttrib.NumComponents )
        {
            case 1:
                if ( numIndices > 0 )
                {
                    for ( var i = offset; i < end; i++ )
                    {
                        var idx = ( int )( ( index.GetShort( i ) & 0xFFFF ) * vertexSize )! + posoff;
                        _tmpV.Set( verts.GetFloat( idx ), 0, 0 );
                        if ( transform != null )
                        {
                            _tmpV.Mul( transform );
                        }
                        box.Extend( _tmpV );
                    }
                }
                else
                {
                    for ( var i = offset; i < end; i++ )
                    {
                        var idx = ( int )( i * vertexSize )! + posoff;
                        _tmpV.Set( verts.GetFloat( idx ), 0, 0 );
                        if ( transform != null )
                        {
                            _tmpV.Mul( transform );
                        }
                        box.Extend( _tmpV );
                    }
                }
                break;

            case 2:
                if ( numIndices > 0 )
                {
                    for ( var i = offset; i < end; i++ )
                    {
                        var idx = ( int )( ( index.GetShort( i ) & 0xFFFF ) * vertexSize )! + posoff;
                        _tmpV.Set( verts.GetFloat( idx ), verts.GetFloat( idx + 1 ), 0 );
                        if ( transform != null )
                        {
                            _tmpV.Mul( transform );
                        }
                        box.Extend( _tmpV );
                    }
                }
                else
                {
                    for ( var i = offset; i < end; i++ )
                    {
                        var idx = ( int )( i * vertexSize )! + posoff;
                        _tmpV.Set( verts.GetFloat( idx ), verts.GetFloat( idx + 1 ), 0 );
                        if ( transform != null )
                        {
                            _tmpV.Mul( transform );
                        }
                        box.Extend( _tmpV );
                    }
                }
                break;

            case 3:
                if ( numIndices > 0 )
                {
                    for ( var i = offset; i < end; i++ )
                    {
                        var idx = ( int )( ( index.GetShort( i ) & 0xFFFF ) * vertexSize )! + posoff;
                        _tmpV.Set( verts.GetFloat( idx ), verts.GetFloat( idx + 1 ), verts.GetFloat( idx + 2 ) );
                        if ( transform != null )
                        {
                            _tmpV.Mul( transform );
                        }
                        box.Extend( _tmpV );
                    }
                }
                else
                {
                    for ( var i = offset; i < end; i++ )
                    {
                        var idx = ( int )( i * vertexSize )! + posoff;
                        _tmpV.Set( verts.GetFloat( idx ), verts.GetFloat( idx + 1 ), verts.GetFloat( idx + 2 ) );
                        if ( transform != null )
                        {
                            _tmpV.Mul( transform );
                        }
                        box.Extend( _tmpV );
                    }
                }
                break;
        }
        return box;
    }

    public float CalculateRadiusSquared( in float centerX, in float centerY, in float centerZ, int offset, int count, in Matrix4? transform )
    {
        var numIndices = NumIndices;
        var verts      = _vertices.GetBuffer( false );
        var index      = IndexData.GetBuffer( false );
        var posAttrib  = GetVertexAttribute( ( int )VertexConstants.Usage.POSITION );
        var posoff     = posAttrib!.Offset / 4;
        var vertexSize = _vertices.Attributes.VertexSize / 4;
        var end        = offset + count;

        float result = 0;

        switch ( posAttrib.NumComponents )
        {
            case 1:
                for ( var i = offset; i < end; i++ )
                {
                    var idx = ( ( index.GetShort( i ) & 0xFFFF ) * vertexSize ) + posoff;
                    _tmpV.Set( verts.GetFloat( idx ), 0, 0 );
                    if ( transform != null )
                    {
                        _tmpV.Mul( transform );
                    }
                    var r = _tmpV.Sub( centerX, centerY, centerZ ).Len2();
                    if ( r > result )
                    {
                        result = r;
                    }
                }
                break;

            case 2:
                for ( var i = offset; i < end; i++ )
                {
                    var idx = ( ( index.GetShort( i ) & 0xFFFF ) * vertexSize ) + posoff;
                    _tmpV.Set( verts.GetFloat( idx ), verts.GetFloat( idx + 1 ), 0 );
                    if ( transform != null )
                    {
                        _tmpV.Mul( transform );
                    }
                    var r = _tmpV.Sub( centerX, centerY, centerZ ).Len2();
                    if ( r > result )
                    {
                        result = r;
                    }
                }
                break;

            case 3:
                for ( var i = offset; i < end; i++ )
                {
                    var idx = ( ( index.GetShort( i ) & 0xFFFF ) * vertexSize ) + posoff;
                    _tmpV.Set( verts.GetFloat( idx ), verts.GetFloat( idx + 1 ), verts.GetFloat( idx + 2 ) );
                    if ( transform != null )
                    {
                        _tmpV.Mul( transform );
                    }
                    var r = _tmpV.Sub( centerX, centerY, centerZ ).Len2();
                    if ( r > result )
                    {
                        result = r;
                    }
                }
                break;
        }
        return result;
    }

    public float CalculateRadius( in float centerX, in float centerY, in float centerZ, int offset, int count, in Matrix4? transform )
    {
        return ( float )Math.Sqrt( CalculateRadiusSquared( centerX, centerY, centerZ, offset, count, transform ) );
    }

    public float CalculateRadius( in Vector3 center, int offset, int count, in Matrix4 transform )
    {
        return CalculateRadius( center.X, center.Y, center.Z, offset, count, transform );
    }

    public float CalculateRadius( in float centerX, in float centerY, in float centerZ, int offset, int count )
    {
        return CalculateRadius( centerX, centerY, centerZ, offset, count, null );
    }

    public float CalculateRadius( in Vector3 center, int offset, int count )
    {
        return CalculateRadius( center.X, center.Y, center.Z, offset, count, null );
    }

    public float CalculateRadius( in float centerX, in float centerY, in float centerZ )
    {
        return CalculateRadius( centerX, centerY, centerZ, 0, NumIndices, null );
    }

    public float CalculateRadius( in Vector3 center )
    {
        return CalculateRadius( center.X, center.Y, center.Z, 0, NumIndices, null );
    }

    private static void AddManagedMesh( IApplication app, Mesh mesh )
    {
        List< Mesh >? managedResources;
        if ( !_meshes.ContainsKey( app ) || ( _meshes[ app ] == null ) )
        {
            managedResources = [ ];
        }
        else
        {
            managedResources = _meshes[ app ];
        }
        managedResources?.Add( mesh );
        _meshes.Add( app, managedResources );
    }

    public static void InvalidateAllMeshes( IApplication app )
    {
        for ( var i = 0; i < _meshes.Count; i++ )
        {
            _meshes[ app ]?[ i ]._vertices.Invalidate();
            _meshes[ app ]?[ i ].IndexData.Invalidate();
        }
    }

    public static void ClearAllMeshes( IApplication app )
    {
        _meshes.Remove( app );
    }

    public void Scale( float scaleX, float scaleY, float scaleZ )
    {
        var posAttr       = GetVertexAttribute( ( int )VertexConstants.Usage.POSITION );
        var offset        = posAttr!.Offset / 4;
        var numComponents = posAttr.NumComponents;
        var numVertices   = NumVertices;
        var vertexSize    = VertexSize / 4;
        var vertices      = new float[ numVertices * vertexSize ];

        GetVertices( vertices );
        var idx = offset;

        switch ( numComponents )
        {
            case 1:
                for ( var i = 0; i < numVertices; i++ )
                {
                    vertices[ idx ] *= scaleX;
                    idx             += vertexSize;
                }
                break;

            case 2:
                for ( var i = 0; i < numVertices; i++ )
                {
                    vertices[ idx ]     *= scaleX;
                    vertices[ idx + 1 ] *= scaleY;
                    idx                 += vertexSize;
                }
                break;

            case 3:
                for ( var i = 0; i < numVertices; i++ )
                {
                    vertices[ idx ]     *= scaleX;
                    vertices[ idx + 1 ] *= scaleY;
                    vertices[ idx + 2 ] *= scaleZ;
                    idx                 += vertexSize;
                }
                break;
        }

        SetVertices( vertices );
    }

    public void Transform( in Matrix4 matrix ) => Transform( matrix, 0, NumVertices );

    protected void Transform( in Matrix4 matrix, in int start, in int count )
    {
        var posAttr = GetVertexAttribute( ( int )VertexConstants.Usage.POSITION );
        var posOffset     = posAttr!.Offset / 4;
        var stride        = VertexSize / 4;
        var numComponents = posAttr.NumComponents;
        var vertices      = new float[ count * stride ];
        GetVertices( start * stride, count * stride, vertices );
        Transform( matrix, vertices, stride, posOffset, numComponents, 0, count );
        UpdateVertices( start * stride, vertices );
    }

    public static void Transform( in Matrix4 matrix, in float[] vertices, float vertexSize, float offset, int dimensions, int start, int count )
    {
        var tmp      = new Vector3();
        var idxFloat = offset + ( start * vertexSize );

        switch ( dimensions )
        {
            case 1:
                for ( var i = 0; i < count; i++ )
                {
                    var idx = ( int )Math.Truncate( idxFloat );
                    tmp.Set( vertices[ idx ], 0, 0 ).Mul( matrix );
                    vertices[ idx ] =  tmp.X;
                    idxFloat        += vertexSize;
                }
                break;

            case 2:
                for ( var i = 0; i < count; i++ )
                {
                    var idx = ( int )Math.Truncate( idxFloat );
                    tmp.Set( vertices[ idx ], vertices[ idx + 1 ], 0 ).Mul( matrix );
                    vertices[ idx ]     =  tmp.X;
                    vertices[ idx + 1 ] =  tmp.Y;
                    idxFloat            += vertexSize;
                }
                break;

            case 3:
                for ( var i = 0; i < count; i++ )
                {
                    var idx = ( int )Math.Truncate( idxFloat );
                    tmp.Set( vertices[ idx ], vertices[ idx + 1 ], vertices[ idx + 2 ] ).Mul( matrix );
                    vertices[ idx ]     =  tmp.X;
                    vertices[ idx + 1 ] =  tmp.Y;
                    vertices[ idx + 2 ] =  tmp.Z;
                    idxFloat            += vertexSize;
                }
                break;
        }
    }

    public void TransformUV( in Matrix3 matrix ) => TransformUV( matrix, 0, NumVertices );

    protected void TransformUV( in Matrix3 matrix, int start, int count )
    {
        var posAttr = GetVertexAttribute( ( int )VertexConstants.Usage.TEXTURE_COORDINATES );
        if ( posAttr == null ) return;
        var offset      = posAttr.Offset / 4;
        var vertexSize  = VertexSize / 4;
        var numVertices = NumVertices;
        var verts       = _vertices.GetBuffer( false );
        for ( var i = 0; i < count; i++ )
        {
            var index = offset + ( ( start + i ) * vertexSize );
            var uv    = new Vector2( verts.GetFloat( index ), verts.GetFloat( index + 1 ) );
            uv = matrix.Transform( uv );
            verts.PutFloat( index, uv.X );
            verts.PutFloat( index + 1, uv.Y );
        }
    }

    public static void TransformUV( in Matrix3 matrix, in float[] vertices, int vertexSize, int offset, int start, int count )
    {
        var tmp = new Vector2();
        var idx = offset + ( start * vertexSize );

        for ( var i = 0; i < count; i++ )
        {
            tmp.Set( vertices[ idx ], vertices[ idx + 1 ] ).Mul( matrix );

            vertices[ idx ]     =  tmp.X;
            vertices[ idx + 1 ] =  tmp.Y;
            idx                 += vertexSize;
        }
    }

    public Mesh Copy( bool isStatic ) => Copy( isStatic, false, null );

    public Mesh Copy( bool isStatic, bool removeDuplicates, in int[]? usage )
    {
        var vertexSizeFloats = VertexSize / 4; // Vertex size in floats
        var numVertices      = NumVertices;
        var vertices         = new float[ numVertices * vertexSizeFloats ];
        GetVertices( 0, vertices.Length, vertices );
        VertexAttribute[]? attrs               = null;
        var                newVertexSizeFloats = 0;
        int[]?             checks              = null; // Store float offsets

        if ( usage != null )
        {
            var sizeFloats = 0;
            var asCount    = 0;

            foreach ( var t in usage )
            {
                var a = GetVertexAttribute( t );
                if ( a != null )
                {
                    sizeFloats += a.NumComponents;
                    asCount++;
                }
            }

            if ( sizeFloats > 0 )
            {
                attrs  = new VertexAttribute[ asCount ];
                checks = new int[ sizeFloats ]; // Store float offsets
                var idx = -1;
                var ai  = -1;

                foreach ( var t in usage )
                {
                    var a = GetVertexAttribute( t );
                    if ( a == null ) continue;
                    for ( var j = 0; j < a.NumComponents; j++ )
                    {
                        checks[ ++idx ] = ( a.Offset / 4 ) + j; // Store float offsets!
                    }
                    attrs[ ++ai ]       =  a.Copy();
                    newVertexSizeFloats += a.NumComponents;
                }
            }
        }

        if ( checks == null )
        {
            checks = new int[ vertexSizeFloats ];
            for ( var i = 0; i < vertexSizeFloats; i++ )
            {
                checks[ i ] = i;
            }
            newVertexSizeFloats = vertexSizeFloats;
        }

        var      numIndices = NumIndices;
        short[]? indices    = null;

        if ( numIndices > 0 )
        {
            indices = new short[ numIndices ];
            GetIndices( indices );

            if ( removeDuplicates || ( newVertexSizeFloats != vertexSizeFloats ) )
            {
                var tmp  = new float[ numVertices * newVertexSizeFloats ]; // Correct size for tmp
                var size = 0;

                for ( var i = 0; i < numIndices; i++ )
                {
                    var   idx1     = indices[ i ] * vertexSizeFloats; // Use float vertex size
                    short newIndex = -1;

                    if ( removeDuplicates )
                    {
                        for ( var j = 0; ( j < size ) && ( newIndex < 0 ); j++ )
                        {
                            var idx2  = j * newVertexSizeFloats; // Use float vertex size
                            var found = true;

                            for ( var k = 0; ( k < checks.Length ) && found; k++ )
                            {
                                if ( !tmp[ idx2 + k ].Equals( vertices[ idx1 + checks[ k ] ] ) )
                                {
                                    found = false;
                                }
                            }

                            if ( found ) newIndex = ( short )j;
                        }
                    }

                    if ( newIndex >= 0 ) // Check if newIndex was found
                    {
                        indices[ i ] = newIndex;
                    }
                    else
                    {
                        var idx = size * newVertexSizeFloats; // Use float vertex size
                        for ( var j = 0; j < checks.Length; j++ )
                        {
                            tmp[ idx + j ] = vertices[ idx1 + checks[ j ] ];
                        }
                        indices[ i ] = ( short )size;
                        size++;
                    }
                }
                vertices    = tmp;
                numVertices = size;
            }
        }

        var result = attrs == null ? new Mesh( isStatic, numVertices, indices?.Length ?? 0, VertexAttributes )
                                   : new Mesh( isStatic, numVertices, indices?.Length ?? 0, attrs );
        result.SetVertices( vertices, 0, numVertices * newVertexSizeFloats ); // Use float vertex size

        if ( indices != null )
        {
            result.SetIndices( indices );
        }

        return result;
    }

    private static VertexBufferObjectWithVAO MakeVertexBuffer( bool isStatic, int maxVertices, VertexAttributes vertexAttributes )
    {
        return new VertexBufferObjectWithVAO( isStatic, maxVertices, vertexAttributes );
    }

    public void Dispose()
    {
        if ( _meshes[ GdxApi.App ] != null ) _meshes[ GdxApi.App ]?.Remove( this );
        _vertices.Dispose();
        _instances?.Dispose();
        IndexData.Dispose();
        GC.SuppressFinalize( this );
    }
}
